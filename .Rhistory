scale_fill_manual(values = mycolors) +
geom_text(aes(x=group, y=cumsum(share)-1, label=paste(speaker,": ",share,"%", sep="")), color="white", fontface="bold", size=4)
totals <- rbind(names(ngram[,1:24]), colSums(ngram[,1:24]))
total <- data.frame(t(totals))
colnames(total) <- c("speaker", "total")
total$per.Episode <- round(as.numeric(as.character(total$total))/132, 2)
total <- total[order(-total$per.Episode), ]
total$share <- round(total$per.Episode/sum(total$per.Episode), 3)*100
total2 <- total[total$speaker!='ALL.OTHERS', ]
total2 <- total2[total2$share > 2, ]
total2$speaker <- factor(total2$speaker, levels=total2$speaker)
total2$group <- "one"
mycolors <- c("#C20631", "#673e1e", "#21B726", "#5BE1C6", "#266E35",
"#C20631", "#673e1e", "#F5871F")
#ggplot(total2, aes(speaker, share)) + geom_bar(stat="identity", aes(fill=speaker)) +
#    theme_classic() + labs(title="Percent of Words Spoken per Episode (Avg.)") + ylab("% Words Spoken per Episode (Avg.)") +
#    xlab("") +  theme(legend.position=1,plot.title = element_text(size=22), axis.title.y=element_text(margin=margin(0,10,0,0))) +
#    scale_fill_manual(values = mycolors) +
#    geom_text(aes(x=speaker, y=share-0.33, label=paste(share,"%", sep="")), color="white", fontface="bold", size=4)
ggplot(total2, aes(group,share)) + geom_bar(stat="identity", aes(fill=speaker)) +
theme_classic() + labs(title="Words Spoken per Episode (Avg.)") + ylab("Words Spoken per Episode (Avg.)") +
xlab("") +  theme(legend.position=1,plot.title = element_text(size=22), axis.title.y=element_text(margin=margin(0,10,0,0))) +
scale_fill_manual(values = mycolors) +
geom_text(aes(x=group, y=cumsum(share)-1, label=paste(speaker,": ",share,"%", sep="")), color="white", fontface="bold", size=4)
mycolors <- c("#C20631", "#673e1e", "#21B726", "#5BE1C6", "#266E35",
"#C20631", "#F5871F")
#ggplot(total2, aes(speaker, share)) + geom_bar(stat="identity", aes(fill=speaker)) +
#    theme_classic() + labs(title="Percent of Words Spoken per Episode (Avg.)") + ylab("% Words Spoken per Episode (Avg.)") +
#    xlab("") +  theme(legend.position=1,plot.title = element_text(size=22), axis.title.y=element_text(margin=margin(0,10,0,0))) +
#    scale_fill_manual(values = mycolors) +
#    geom_text(aes(x=speaker, y=share-0.33, label=paste(share,"%", sep="")), color="white", fontface="bold", size=4)
ggplot(total2, aes(group,share)) + geom_bar(stat="identity", aes(fill=speaker)) +
theme_classic() + labs(title="Words Spoken per Episode (Avg.)") + ylab("Words Spoken per Episode (Avg.)") +
xlab("") +  theme(legend.position=1,plot.title = element_text(size=22), axis.title.y=element_text(margin=margin(0,10,0,0))) +
scale_fill_manual(values = mycolors) +
geom_text(aes(x=group, y=cumsum(share)-1, label=paste(speaker,": ",share,"%", sep="")), color="white", fontface="bold", size=4)
mycolors <- c("#C20631", "#673e1e", "#21B726", "#5BE1C6", "#266E35",
"#F5871F","#C20631")
ggplot(total2, aes(group,share)) + geom_bar(stat="identity", aes(fill=speaker)) +
theme_classic() + labs(title="Words Spoken per Episode (Avg.)") + ylab("Words Spoken per Episode (Avg.)") +
xlab("") +  theme(legend.position=1,plot.title = element_text(size=22), axis.title.y=element_text(margin=margin(0,10,0,0))) +
scale_fill_manual(values = mycolors) +
geom_text(aes(x=group, y=cumsum(share)-1, label=paste(speaker,": ",share,"%", sep="")), color="white", fontface="bold", size=4)
ggplot(total2, aes(group,share)) + geom_bar(stat="identity", aes(fill=speaker)) +
theme_classic() + labs(title="Words Spoken per Episode (Avg.)") + ylab("Words Spoken per Episode (Avg.)") +
xlab("") +  theme(legend.position=1,plot.title = element_text(size=22), axis.title.y=element_text(margin=margin(0,10,0,0))) +
scale_fill_manual(values = mycolors) +
geom_text(aes(x=group, y=cumsum(share)-1.5, label=paste(speaker,": ",share,"%", sep="")), color="white", fontface="bold", size=4)
ggplot(total2, aes(group,share)) + geom_bar(stat="identity", aes(fill=speaker)) +
theme_classic() + labs(title="Words Spoken per Episode (Avg.)") + ylab("Words Spoken per Episode (Avg.)") +
xlab("") +  theme(legend.position=1,plot.title = element_text(size=22), axis.title.y=element_text(margin=margin(0,10,0,0))) +
scale_fill_manual(values = mycolors) +
geom_text(aes(x=group, y=cumsum(share)-share*0.1, label=paste(speaker,": ",share,"%", sep="")), color="white", fontface="bold", size=4)
ggplot(total2, aes(group,share)) + geom_bar(stat="identity", aes(fill=speaker)) +
theme_classic() + labs(title="Words Spoken per Episode (Avg.)") + ylab("Words Spoken per Episode (Avg.)") +
xlab("") +  theme(legend.position=1,plot.title = element_text(size=22), axis.title.y=element_text(margin=margin(0,10,0,0))) +
scale_fill_manual(values = mycolors) +
geom_text(aes(x=group, y=cumsum(share)-share*0.5, label=paste(speaker,": ",share,"%", sep="")), color="white", fontface="bold", size=4)
LL <- read.csv("tidy data/southpark_ngrams_filtered.csv", stringsAsFactors=FALSE)
# keep just main speakers
main.speakers <- c("CARTMAN", "STAN", "KYLE", "KENNY",
"BUTTERS", "MR..GARRISON")
plot <- LL[LL$speaker %in% main.speakers, ]
# split by speaker, rank by log likelihood  * ngram length, keep the top 25
rankbyspeaker <- function(df, direction) {
rank <- NULL
speakers <- unique(df$speaker)
for(j in speakers) {
subset <- df[df$speaker==j,]
subset$rank <- subset$LL*subset$ngram
subset <- subset[order(-subset$rank),]
if(length(subset[,1]) > 25) subset <- subset[1:25,]
row.names(subset) <- NULL
subset$rank2 <- as.numeric(row.names(subset))
rank <- rbind(rank, subset)
}
return(rank)
}
ranked <- rankbyspeaker(plot)
ranked <- ranked[order(-ranked$speaker.total), ]
ranked$speaker <- factor(ranked$speaker, levels=c('CARTMAN', 'STAN', 'KYLE','KENNY',
'BUTTERS', 'MR..GARRISON'))
# generate plot
ec <- readPNG("plots/images/cartman.png"); cartman <- rasterGrob(ec, interpolate=TRUE)
sm <- readPNG("plots/images/stan.png"); stan <- rasterGrob(sm, interpolate=TRUE)
km <- readPNG("plots/images/kenny.png"); kenny <- rasterGrob(km, interpolate=TRUE)
kb <- readPNG("plots/images/kyle.png"); kyle <- rasterGrob(kb, interpolate=TRUE)
mg <- readPNG("plots/images/garrison.png"); garrison <- rasterGrob(mg, interpolate=TRUE)
bs <- readPNG("plots/images/butters.png"); butters <- rasterGrob(bs, interpolate=TRUE)
mycolors <- c("#C20631", "#673e1e", "#21B726", "#F5871F", "#5BE1C6", "#266E35")
ggplot(ranked, aes(speaker, ((rank2*-1)-4))) +
geom_point(color="white") +
geom_label(aes(label=ranked$word,fill=ranked$speaker), color='white', fontface='bold', size=5) +
scale_fill_manual(values = mycolors) +
theme_classic() +
theme(legend.position=1,plot.title = element_text(size=22), axis.title.y=element_text(margin=margin(0,10,0,0))) +
labs(title="Most Characteristic Ngrams of South Park Characters") +
xlab("") + ylab("Ranking") +
scale_y_continuous(limits=c(-29,-1), breaks=c(-24, -14, -4.5), labels=c("#20", "#10", "#1")) +
annotation_custom(cartman, xmin=.5, xmax=1.5, ymin=0, ymax=-4) +
annotation_custom(stan, xmin=1.5, xmax=2.5, ymin=0, ymax=-4) +
annotation_custom(kyle, xmin=2.5, xmax=3.5, ymin=0, ymax=-4) +
annotation_custom(kenny, xmin=3.5, xmax=4.5, ymin=0, ymax=-4) +
annotation_custom(butters, xmin=4.5, xmax=5.5, ymin=0, ymax=-4) +
annotation_custom(garrison, xmin=5.5, xmax=6.5, ymin=0, ymax=-4)
warnings()
library(tm)
library(knitr)
library(stringr)
library(ggplot2)
library(wordcloud)
library(RColorBrewer)
library(png)
library(grid)
opts_chunk$set(cache=FALSE, fig.width=3, fig.height=4, echo=FALSE, warning=FALSE, message=FALSE)
#setwd("/Users/kaylinwalker/R/textmining_southpark/")
setwd("/Users/kwalker/git_projects/textmining_southpark")
ngram <- read.csv("tidy data/tdm/southpark_tdm.csv", stringsAsFactors=FALSE)
ngram2 <- read.csv("tidy data/tdm/southpark_bi_tdm.csv", stringsAsFactors=FALSE)
ngram3 <- read.csv("tidy data/tdm/southpark_tri_tdm.csv", stringsAsFactors=FALSE)
ngram4 <- read.csv("tidy data/tdm/southpark_quad_tdm.csv", stringsAsFactors=FALSE)
ngram5 <- read.csv("tidy data/tdm/southpark_quint_tdm.csv", stringsAsFactors=FALSE)
LL <- read.csv("tidy data/southpark_ngrams_filtered.csv", stringsAsFactors=FALSE)
# find frequent terms
findFreq <- function(df){
df$total <- rowSums(df[,1:24])
freqs <- df[,25:26]
freqs <- freqs[order(-freqs$total), ]
return(freqs)
}
freq1 <- findFreq(ngram)
freq2 <- findFreq(ngram2); freq2 <- freq2[freq2$word!="ha ha", ]
freq3 <- findFreq(ngram3); freq3 <- freq3[freq3$word!="ha ha ha", ]
wordcloud(freq1$word, freq1$total, scale=c(2.5, 0.3), min.freq=100, max.words=250, random.order=FALSE)
wordcloud(freq2$word, freq2$total, scale=c(2.5, 0.2), min.freq=10, max.words=200, random.order=FALSE)
wordcloud(freq3$word, freq3$total, scale=c(1.5, 0.1), min.freq=2, max.words=150, random.order=FALSE)
totals <- rbind(names(ngram[,1:24]), colSums(ngram[,1:24]))
total <- data.frame(t(totals))
colnames(total) <- c("speaker", "total")
total$per.Episode <- round(as.numeric(as.character(total$total))/132, 2)
total <- total[order(-total$per.Episode), ]
total$share <- round(total$per.Episode/sum(total$per.Episode), 3)*100
total2 <- total[total$speaker!='ALL.OTHERS', ]
total2 <- total2[total2$share > 2, ]
total2$speaker <- factor(total2$speaker, levels=total2$speaker)
total2$group <- "speaker"
mycolors <- c("#C20631", "#673e1e", "#21B726", "#5BE1C6", "#266E35",
"#F5871F","#C20631")
ggplot(total2, aes(group,share)) + geom_bar(stat="identity", aes(fill=speaker)) +
theme_classic() + labs(title="Cartman Talks the Most") +
ylab("Words Spoken per Episode (Avg.)") +
scale_fill_manual(values = mycolors) + xlab("") +
theme(legend.position=1,plot.title = element_text(size=18),
axis.title.y=element_text(margin=margin(0,10,0,0))) +
geom_text(aes(x=group, y=cumsum(share)-share*0.5,
label=paste(speaker,": ",share,"%", sep="")),
color="white", fontface="bold", size=4)
swears <- c("fuck", "shit", "damn", "hell", "ass", "fatass", "asshole", "motherfucker",
"goddman", "goddamnit",  "smartass", "screwed", "screw", "screwing",
"goddamned","goddammit", "fucking", "fuckin", "damnit", "damned", "dammit", "bitch",
"bitches", "assholes", "asses")
swear.grams <- ngram[ngram$word %in% swears, ]
swear.totals <- rbind(names(swear.grams[,1:24]), colSums(swear.grams[,1:24]))
totes <- data.frame(t(rbind(totals, swear.totals[2,])))
colnames(totes) <- c("speaker", "total", "swears")
totes$total <- as.numeric(as.character(totes$total))
totes$swears <- as.numeric(as.character(totes$swears))
overall <- round(sum(totes$swears)/sum(totes$total), 4)
totes$swear.rate <- round(totes$swears/totes$total, 4)
### create the plot
totes <- totes[(totes$total > 2000 | totes$speaker=="KENNY" ) & totes$speaker!="ALL.OTHERS", ]
totes <- totes[order(-totes$swear.rate), ]
totes$speaker <- factor(totes$speaker, levels=totes$speaker)
mycolors <- c("#F5871F", "#C20631", "#21B726", "#5BE1C6", "#266E35", "#673e1e",
"#C20631", "#673e1e", "#21B726", "#F5871F", "#5BE1C6", "#266E35", "#266E35")
ggplot(totes, aes(speaker, swear.rate*1000)) + geom_bar(stat="identity", aes(fill=speaker)) +
geom_hline(yintercept=overall*1000, linetype="dashed") + theme_classic() +
labs(title="Kenny Swears the Most") + ylab("Profanities per 1000 Words") + xlab("") +
annotate("text", x=11, y=(overall*1000)+1, label="Average") +
scale_fill_manual(values = mycolors) +
geom_text(aes(x=speaker, y=(swear.rate*1000)-2, label=swear.rate*1000),
color="white", fontface="bold", size=6) +
theme(legend.position=1,plot.title = element_text(size=22),
axis.title.y=element_text(margin=margin(0,10,0,0)))
# keep just main speakers
main.speakers <- c("CARTMAN", "STAN", "KYLE", "KENNY",
"BUTTERS", "MR..GARRISON")
plot <- LL[LL$speaker %in% main.speakers, ]
# split by speaker, rank by log likelihood  * ngram length, keep the top 25
rankbyspeaker <- function(df, direction) {
rank <- NULL
speakers <- unique(df$speaker)
for(j in speakers) {
subset <- df[df$speaker==j,]
subset$rank <- subset$LL*subset$ngram
subset <- subset[order(-subset$rank),]
if(length(subset[,1]) > 25) subset <- subset[1:25,]
row.names(subset) <- NULL
subset$rank2 <- as.numeric(row.names(subset))
rank <- rbind(rank, subset)
}
return(rank)
}
ranked <- rankbyspeaker(plot)
ranked <- ranked[order(-ranked$speaker.total), ]
ranked$speaker <- factor(ranked$speaker, levels=c('CARTMAN', 'STAN', 'KYLE','KENNY',
'BUTTERS', 'MR..GARRISON'))
# generate plot
ec <- readPNG("plots/images/cartman.png"); cartman <- rasterGrob(ec, interpolate=TRUE)
sm <- readPNG("plots/images/stan.png"); stan <- rasterGrob(sm, interpolate=TRUE)
km <- readPNG("plots/images/kenny.png"); kenny <- rasterGrob(km, interpolate=TRUE)
kb <- readPNG("plots/images/kyle.png"); kyle <- rasterGrob(kb, interpolate=TRUE)
mg <- readPNG("plots/images/garrison.png"); garrison <- rasterGrob(mg, interpolate=TRUE)
bs <- readPNG("plots/images/butters.png"); butters <- rasterGrob(bs, interpolate=TRUE)
mycolors <- c("#C20631", "#673e1e", "#21B726", "#F5871F", "#5BE1C6", "#266E35")
ggplot(ranked, aes(speaker, ((rank2*-1)-4))) +
geom_point(color="white") +
geom_label(aes(label=ranked$word,fill=ranked$speaker), color='white', fontface='bold', size=5) +
scale_fill_manual(values = mycolors) +
theme_classic() +
theme(legend.position=1,plot.title = element_text(size=22),
axis.title.y=element_text(margin=margin(0,10,0,0))) +
labs(title="Most Characteristic Ngrams of South Park Characters") +
xlab("") + ylab("Ranking") +
scale_y_continuous(limits=c(-29,-1), breaks=c(-24, -14, -4.5), labels=c("#20", "#10", "#1")) +
annotation_custom(cartman, xmin=.5, xmax=1.5, ymin=0, ymax=-4) +
annotation_custom(stan, xmin=1.5, xmax=2.5, ymin=0, ymax=-4) +
annotation_custom(kyle, xmin=2.5, xmax=3.5, ymin=0, ymax=-4) +
annotation_custom(kenny, xmin=3.5, xmax=4.5, ymin=0, ymax=-4) +
annotation_custom(butters, xmin=4.5, xmax=5.5, ymin=0, ymax=-4) +
annotation_custom(garrison, xmin=5.5, xmax=6.5, ymin=0, ymax=-4)
##### Load packages and load in necessary .csv files
library(tm)
library(knitr)
library(stringr)
library(ggplot2)
library(wordcloud)
library(RColorBrewer)
library(png)
library(grid)
#setwd("/Users/kaylinwalker/R/textmining_southpark/scripts")
#source("01_southpark_scrape.R")
#source("02_southpark_corpus.R")
#source("03_southpark_loglikelihood.R")
#setwd("/Users/kaylinwalker/R/textmining_southpark/")
setwd("/Users/kwalker/git_projects/textmining_southpark")
ngram <- read.csv("tidy data/tdm/southpark_tdm.csv", stringsAsFactors=FALSE)
ngram2 <- read.csv("tidy data/tdm/southpark_bi_tdm.csv", stringsAsFactors=FALSE)
ngram3 <- read.csv("tidy data/tdm/southpark_tri_tdm.csv", stringsAsFactors=FALSE)
ngram4 <- read.csv("tidy data/tdm/southpark_quad_tdm.csv", stringsAsFactors=FALSE)
ngram5 <- read.csv("tidy data/tdm/southpark_quint_tdm.csv", stringsAsFactors=FALSE)
LL <- read.csv("tidy data/southpark_ngrams_filtered.csv", stringsAsFactors=FALSE)
##### WORDCLOUDS
findFreq <- function(df){
df$total <- rowSums(df[,1:24])
freqs <- df[,25:26]
freqs <- freqs[order(-freqs$total), ]
return(freqs)
}
freq1 <- findFreq(ngram)
freq2 <- findFreq(ngram2); freq2 <- freq2[freq2$word!="ha ha", ]
freq3 <- findFreq(ngram3); freq3 <- freq3[freq3$word!="ha ha ha", ]
wordcloud(freq1$word, freq1$total, scale=c(2.5, 0.3), min.freq=100, max.words=250, random.order=FALSE)
wordcloud(freq2$word, freq2$total, scale=c(2.5, 0.2), min.freq=10, max.words=200, random.order=FALSE)
wordcloud(freq3$word, freq3$total, scale=c(1.5, 0.1), min.freq=2, max.words=150, random.order=FALSE)
##### TALKS-A-LOT: Identify who says the most on average
totals <- rbind(names(ngram[,1:24]), colSums(ngram[,1:24]))
total <- data.frame(t(totals))
colnames(total) <- c("speaker", "total")
# get the average words per episode, assuming that the main speakers are in each
total$per.Episode <- round(as.numeric(as.character(total$total))/132, 2)
total <- total[order(-total$per.Episode), ]
total$share <- round(total$per.Episode/sum(total$per.Episode), 3)*100
# remove all others because it's confusing graphically
total2 <- total[total$speaker!='ALL.OTHERS', ]
# keep only people with >2% word share
total2 <- total2[total2$share > 2, ]
# make the plost
total2$speaker <- factor(total2$speaker, levels=total2$speaker)
total2$group <- "speaker"
mycolors <- c("#C20631", "#673e1e", "#21B726", "#5BE1C6", "#266E35",
"#F5871F","#C20631")
ggplot(total2, aes(group,share)) + geom_bar(stat="identity", aes(fill=speaker)) +
theme_classic() + labs(title="Cartman Talks the Most") +
ylab("Words Spoken per Episode (Avg.)") +
scale_fill_manual(values = mycolors) + xlab("") +
theme(legend.position=1,plot.title = element_text(size=18),
axis.title.y=element_text(margin=margin(0,10,0,0))) +
geom_text(aes(x=group, y=cumsum(share)-share*0.5,
label=paste(speaker,": ",share,"%", sep="")),
color="white", fontface="bold", size=4)
##### SWEARS-A-LOT: Identify who swears the most
# think up all the swear words they might use
swears <- c("fuck", "shit", "damn", "hell", "ass", "fatass", "asshole", "motherfucker",
"goddman", "goddamnit",  "smartass", "screwed", "screw", "screwing",
"goddamned","goddammit", "fucking", "fuckin", "damnit", "damned", "dammit", "bitch",
"bitches", "assholes", "asses")
# subset the unigram .csv
swear.grams <- ngram[ngram$word %in% swears, ]
swear.totals <- rbind(names(swear.grams[,1:24]), colSums(swear.grams[,1:24]))
totes <- data.frame(t(rbind(totals, swear.totals[2,])))
colnames(totes) <- c("speaker", "total", "swears")
totes$total <- as.numeric(as.character(totes$total))
totes$swears <- as.numeric(as.character(totes$swears))
# calculate the overall rate of swearing
overall <- round(sum(totes$swears)/sum(totes$total), 4)
# calculate the swearing rate per person
totes$swear.rate <- round(totes$swears/totes$total, 4)
# create the plot
totes <- totes[(totes$total > 2000 | totes$speaker=="KENNY" ) & totes$speaker!="ALL.OTHERS", ]
totes <- totes[order(-totes$swear.rate), ]
totes$speaker <- factor(totes$speaker, levels=totes$speaker)
mycolors <- c("#F5871F", "#C20631", "#21B726", "#5BE1C6", "#266E35", "#673e1e",
"#C20631", "#673e1e", "#21B726", "#F5871F", "#5BE1C6", "#266E35", "#266E35")
ggplot(totes, aes(speaker, swear.rate*1000)) + geom_bar(stat="identity", aes(fill=speaker)) +
geom_hline(yintercept=overall*1000, linetype="dashed") + theme_classic() +
labs(title="Kenny Swears the Most") + ylab("Profanities per 1000 Words") + xlab("") +
annotate("text", x=11, y=(overall*1000)+1, label="Average") +
scale_fill_manual(values = mycolors) +
geom_text(aes(x=speaker, y=(swear.rate*1000)-2, label=swear.rate*1000),
color="white", fontface="bold", size=6) +
theme(legend.position=1,plot.title = element_text(size=22),
axis.title.y=element_text(margin=margin(0,10,0,0)))
ggplot(totes, aes(speaker, swear.rate*1000)) + geom_bar(stat="identity", aes(fill=speaker)) +
geom_hline(yintercept=overall*1000, linetype="dashed") + theme_classic() +
labs(title="Kenny Swears the Most") + ylab("Profanities per 1000 Words") + xlab("") +
annotate("text", x=11, y=(overall*1000)+1, label="Average") +
scale_fill_manual(values = mycolors) +
geom_text(aes(x=speaker, y=(swear.rate*1000)-2, label=swear.rate*1000),
color="white", fontface="bold", size=6) +
theme(legend.position=1,plot.title = element_text(size=22),
axis.title.y=element_text(margin=margin(0,10,0,0)),
axis.text.x = element_text(angle = 20, hjust = 1))
ggplot(totes, aes(speaker, swear.rate*1000)) + geom_bar(stat="identity", aes(fill=speaker)) +
geom_hline(yintercept=overall*1000, linetype="dashed") + theme_classic() +
labs(title="Kenny Swears the Most") + ylab("Profanities per 1000 Words") + xlab("") +
annotate("text", x=11, y=(overall*1000)+1, label="Average") +
scale_fill_manual(values = mycolors) +
geom_text(aes(x=speaker, y=(swear.rate*1000)-2, label=swear.rate*1000),
color="white", fontface="bold", size=6) +
theme(legend.position=1,plot.title = element_text(size=22),
axis.title.y=element_text(margin=margin(0,10,0,0)),
axis.text.x = element_text(angle = 10, hjust = 1))
ggplot(totes, aes(speaker, swear.rate*1000)) + geom_bar(stat="identity", aes(fill=speaker)) +
geom_hline(yintercept=overall*1000, linetype="dashed") + theme_classic() +
labs(title="Kenny Swears the Most") + ylab("Profanities per 1000 Words") + xlab("") +
annotate("text", x=11, y=(overall*1000)+1, label="Average") +
scale_fill_manual(values = mycolors) +
geom_text(aes(x=speaker, y=(swear.rate*1000)-2, label=swear.rate*1000),
color="white", fontface="bold", size=6) +
theme(legend.position=1,plot.title = element_text(size=22),
axis.title.y=element_text(margin=margin(0,10,0,0)),
axis.text.x = element_text(angle = 15, hjust = 1))
# keep just main speakers
main.speakers <- c("CARTMAN", "STAN", "KYLE", "KENNY",
"BUTTERS", "MR..GARRISON")
plot <- ngrams[ngrams$speaker %in% main.speakers, ]
# split by speaker, rank by log likelihood  * ngram length, keep the top 25
rankbyspeaker <- function(df, direction) {
rank <- NULL
speakers <- unique(df$speaker)
for(j in speakers) {
subset <- df[df$speaker==j,]
subset$rank <- subset$LL*subset$ngram
subset <- subset[order(-subset$rank),]
if(length(subset[,1]) > 25) subset <- subset[1:25,]
row.names(subset) <- NULL
subset$rank2 <- as.numeric(row.names(subset))
rank <- rbind(rank, subset)
}
return(rank)
}
ranked <- rankbyspeaker(plot)
ranked <- ranked[order(-ranked$speaker.total), ]
ranked$speaker <- factor(ranked$speaker, levels=c('CARTMAN', 'STAN', 'KYLE','KENNY',
'BUTTERS', 'MR..GARRISON'))
# generate plot
ec <- readPNG("plots/images/cartman.png"); cartman <- rasterGrob(ec, interpolate=TRUE)
sm <- readPNG("plots/images/stan.png"); stan <- rasterGrob(sm, interpolate=TRUE)
km <- readPNG("plots/images/kenny.png"); kenny <- rasterGrob(km, interpolate=TRUE)
kb <- readPNG("plots/images/kyle.png"); kyle <- rasterGrob(kb, interpolate=TRUE)
mg <- readPNG("plots/images/garrison.png"); garrison <- rasterGrob(mg, interpolate=TRUE)
bs <- readPNG("plots/images/butters.png"); butters <- rasterGrob(bs, interpolate=TRUE)
mycolors <- c("#C20631", "#673e1e", "#21B726", "#F5871F", "#5BE1C6", "#266E35")
ggplot(ranked, aes(speaker, ((rank2*-1)-4))) +
geom_point(color="white") +
geom_label(aes(label=ranked$word,fill=ranked$speaker), color='white', fontface='bold', size=5) +
scale_fill_manual(values = mycolors) +
theme_classic() +
theme(legend.position=1,plot.title = element_text(size=22), axis.title.y=element_text(margin=margin(0,10,0,0))) +
labs(title="Most Characteristic Ngrams of South Park Characters") +
xlab("") + ylab("Ranking") +
scale_y_continuous(limits=c(-29,-1), breaks=c(-24, -14, -4.5), labels=c("#20", "#10", "#1")) +
annotation_custom(cartman, xmin=.5, xmax=1.5, ymin=0, ymax=-4) +
annotation_custom(stan, xmin=1.5, xmax=2.5, ymin=0, ymax=-4) +
annotation_custom(kyle, xmin=2.5, xmax=3.5, ymin=0, ymax=-4) +
annotation_custom(kenny, xmin=3.5, xmax=4.5, ymin=0, ymax=-4) +
annotation_custom(butters, xmin=4.5, xmax=5.5, ymin=0, ymax=-4) +
annotation_custom(garrison, xmin=5.5, xmax=6.5, ymin=0, ymax=-4)
ggplot(ranked, aes(speaker, ((rank2*-1)-4))) +
geom_point(color="white") +
geom_label(aes(label=ranked$word,fill=ranked$speaker), color='white', fontface='bold', size=5) +
scale_fill_manual(values = mycolors) +
theme_classic() +
theme(legend.position=1,plot.title = element_text(size=22), axis.title.y=element_text(margin=margin(0,10,0,0))) +
labs(title="Character Voice\nMost Characteristic Words/Phrases per Person") +
xlab("") + ylab("Ranking") +
scale_y_continuous(limits=c(-29,-1), breaks=c(-24, -14, -4.5), labels=c("#20", "#10", "#1")) +
annotation_custom(cartman, xmin=.5, xmax=1.5, ymin=0, ymax=-4) +
annotation_custom(stan, xmin=1.5, xmax=2.5, ymin=0, ymax=-4) +
annotation_custom(kyle, xmin=2.5, xmax=3.5, ymin=0, ymax=-4) +
annotation_custom(kenny, xmin=3.5, xmax=4.5, ymin=0, ymax=-4) +
annotation_custom(butters, xmin=4.5, xmax=5.5, ymin=0, ymax=-4) +
annotation_custom(garrison, xmin=5.5, xmax=6.5, ymin=0, ymax=-4)
main.speakers <- c("CARTMAN", "STAN", "KYLE", "KENNY",
"BUTTERS", "MR..GARRISON")
plot <- ngrams[ngrams$speaker %in% main.speakers, ]
# split by speaker, rank by log likelihood  * ngram length, keep the top 25
rankbyspeaker <- function(df, direction) {
rank <- NULL
speakers <- unique(df$speaker)
for(j in speakers) {
subset <- df[df$speaker==j,]
subset$rank <- subset$LL*subset$ngram
subset <- subset[order(-subset$rank),]
if(length(subset[,1]) > 25) subset <- subset[1:25,]
row.names(subset) <- NULL
subset$rank2 <- as.numeric(row.names(subset))
rank <- rbind(rank, subset)
}
return(rank)
}
ranked <- rankbyspeaker(plot)
ranked <- ranked[order(-ranked$speaker.total), ]
ranked$speaker <- factor(ranked$speaker, levels=c('CARTMAN', 'STAN', 'KYLE','KENNY',
'BUTTERS', 'MR..GARRISON'))
# keep just main speakers
main.speakers <- c("CARTMAN", "STAN", "KYLE", "KENNY",
"BUTTERS", "MR..GARRISON")
plot <- LL[LL$speaker %in% main.speakers, ]
# split by speaker, rank by log likelihood  * ngram length, keep the top 25
rankbyspeaker <- function(df, direction) {
rank <- NULL
speakers <- unique(df$speaker)
for(j in speakers) {
subset <- df[df$speaker==j,]
subset$rank <- subset$LL*subset$ngram
subset <- subset[order(-subset$rank),]
if(length(subset[,1]) > 25) subset <- subset[1:25,]
row.names(subset) <- NULL
subset$rank2 <- as.numeric(row.names(subset))
rank <- rbind(rank, subset)
}
return(rank)
}
ranked <- rankbyspeaker(plot)
ranked <- ranked[order(-ranked$speaker.total), ]
ranked$speaker <- factor(ranked$speaker, levels=c('CARTMAN', 'STAN', 'KYLE','KENNY',
'BUTTERS', 'MR..GARRISON'))
# generate plot
ec <- readPNG("plots/images/cartman.png"); cartman <- rasterGrob(ec, interpolate=TRUE)
sm <- readPNG("plots/images/stan.png"); stan <- rasterGrob(sm, interpolate=TRUE)
km <- readPNG("plots/images/kenny.png"); kenny <- rasterGrob(km, interpolate=TRUE)
kb <- readPNG("plots/images/kyle.png"); kyle <- rasterGrob(kb, interpolate=TRUE)
mg <- readPNG("plots/images/garrison.png"); garrison <- rasterGrob(mg, interpolate=TRUE)
bs <- readPNG("plots/images/butters.png"); butters <- rasterGrob(bs, interpolate=TRUE)
mycolors <- c("#C20631", "#673e1e", "#21B726", "#F5871F", "#5BE1C6", "#266E35")
ggplot(ranked, aes(speaker, ((rank2*-1)-4))) +
geom_point(color="white") +
geom_label(aes(label=ranked$word,fill=ranked$speaker), color='white', fontface='bold', size=5) +
scale_fill_manual(values = mycolors) +
theme_classic() +
theme(legend.position=1,plot.title = element_text(size=22), axis.title.y=element_text(margin=margin(0,10,0,0))) +
labs(title="Character Voice\nMost Characteristic Words/Phrases per Person") +
xlab("") + ylab("Ranking") +
scale_y_continuous(limits=c(-29,-1), breaks=c(-24, -14, -4.5), labels=c("#20", "#10", "#1")) +
annotation_custom(cartman, xmin=.5, xmax=1.5, ymin=0, ymax=-4) +
annotation_custom(stan, xmin=1.5, xmax=2.5, ymin=0, ymax=-4) +
annotation_custom(kyle, xmin=2.5, xmax=3.5, ymin=0, ymax=-4) +
annotation_custom(kenny, xmin=3.5, xmax=4.5, ymin=0, ymax=-4) +
annotation_custom(butters, xmin=4.5, xmax=5.5, ymin=0, ymax=-4) +
annotation_custom(garrison, xmin=5.5, xmax=6.5, ymin=0, ymax=-4)
ggplot(ranked, aes(speaker, ((rank2*-1)-4))) +
geom_point(color="white") +
geom_label(aes(label=ranked$word,fill=ranked$speaker), color='white', fontface='bold', size=5) +
scale_fill_manual(values = mycolors) +
theme_classic() +
theme(legend.position=1,plot.title = element_text(size=18), axis.title.y=element_text(margin=margin(0,10,0,0))) +
labs(title="Voice: Most Characteristic Words/Phrases per Person") +
xlab("") + ylab("Ranking") +
scale_y_continuous(limits=c(-29,-1), breaks=c(-24, -14, -4.5), labels=c("#20", "#10", "#1")) +
annotation_custom(cartman, xmin=.5, xmax=1.5, ymin=0, ymax=-4) +
annotation_custom(stan, xmin=1.5, xmax=2.5, ymin=0, ymax=-4) +
annotation_custom(kyle, xmin=2.5, xmax=3.5, ymin=0, ymax=-4) +
annotation_custom(kenny, xmin=3.5, xmax=4.5, ymin=0, ymax=-4) +
annotation_custom(butters, xmin=4.5, xmax=5.5, ymin=0, ymax=-4) +
annotation_custom(garrison, xmin=5.5, xmax=6.5, ymin=0, ymax=-4)
ggplot(ranked, aes(speaker, ((rank2*-1)-4))) +
geom_point(color="white") +
geom_label(aes(label=ranked$word,fill=ranked$speaker), color='white', fontface='bold', size=5) +
scale_fill_manual(values = mycolors) +
theme_classic() +
theme(legend.position=1,plot.title = element_text(size=18), axis.title.y=element_text(margin=margin(0,10,0,0))) +
labs(title="Most Characteristic Words/Phrases per Person") +
xlab("") + ylab("Ranking") +
scale_y_continuous(limits=c(-29,-1), breaks=c(-24, -14, -4.5), labels=c("#20", "#10", "#1")) +
annotation_custom(cartman, xmin=.5, xmax=1.5, ymin=0, ymax=-4) +
annotation_custom(stan, xmin=1.5, xmax=2.5, ymin=0, ymax=-4) +
annotation_custom(kyle, xmin=2.5, xmax=3.5, ymin=0, ymax=-4) +
annotation_custom(kenny, xmin=3.5, xmax=4.5, ymin=0, ymax=-4) +
annotation_custom(butters, xmin=4.5, xmax=5.5, ymin=0, ymax=-4) +
annotation_custom(garrison, xmin=5.5, xmax=6.5, ymin=0, ymax=-4)
