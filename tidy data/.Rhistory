}
keep
for(z in seq_along(bigger[,1])) {
splits <- strsplit(bigger$word[z], " ")
chunks <- bigger$word[z]
mixups <- list(c(1:2), c(2:3), c(3:4), c(4:5), c(1:3), c(2:4), c(3:5), c(1:4), c(2:5))
if(gram==4) mixups <- mixups[c(1,2,3,5,6)]
if(gram==3) mixups <- mixups[c(1,2,5)]
for(j in 1:length(mixups)) {
a <- str_c(splits[[1]][mixups[j][[1]]], collapse=" ")
chunks <- rbind(chunks, a)
}
matches <- one[one$word %in% chunks, ]
matches <- matches[order(-matches$LL),]
if(length(matches[,1]) > 1) one <- one[-as.numeric(row.names(matches[-1,])), ]
keep <- rbind(keep, matches[1,])
}
z <- 1
one <- ngrams.unique[ngrams.unique$speaker==speaker, ]
row.names(one) <- NULL
bigger <- one[one$ngram==gram, ]
keep <- NULL
splits <- strsplit(bigger$word[z], " ")
chunks <- bigger$word[z]
mixups <- list(c(1:2), c(2:3), c(3:4), c(4:5), c(1:3), c(2:4), c(3:5), c(1:4), c(2:5))
if(gram==4) mixups <- mixups[c(1,2,3,5,6)]
if(gram==3) mixups <- mixups[c(1,2,5)]
for(j in 1:length(mixups)) {
a <- str_c(splits[[1]][mixups[j][[1]]], collapse=" ")
chunks <- rbind(chunks, a)
}
matches <- one[one$word %in% chunks, ]
matches <- matches[order(-matches$LL),]
if(length(matches[,1]) > 1) one <- one[-as.numeric(row.names(matches[-1,])), ]
keep <- rbind(keep, matches[1,])
z <-2
splits <- strsplit(bigger$word[z], " ")
chunks <- bigger$word[z]
mixups <- list(c(1:2), c(2:3), c(3:4), c(4:5), c(1:3), c(2:4), c(3:5), c(1:4), c(2:5))
if(gram==4) mixups <- mixups[c(1,2,3,5,6)]
if(gram==3) mixups <- mixups[c(1,2,5)]
for(j in 1:length(mixups)) {
a <- str_c(splits[[1]][mixups[j][[1]]], collapse=" ")
chunks <- rbind(chunks, a)
}
matches <- one[one$word %in% chunks, ]
matches <- matches[order(-matches$LL),]
if(length(matches[,1]) > 1) one <- one[-as.numeric(row.names(matches[-1,])), ]
keep <- rbind(keep, matches[1,])
View(matches)
z <-3
splits <- strsplit(bigger$word[z], " ")
chunks <- bigger$word[z]
mixups <- list(c(1:2), c(2:3), c(3:4), c(4:5), c(1:3), c(2:4), c(3:5), c(1:4), c(2:5))
if(gram==4) mixups <- mixups[c(1,2,3,5,6)]
if(gram==3) mixups <- mixups[c(1,2,5)]
for(j in 1:length(mixups)) {
a <- str_c(splits[[1]][mixups[j][[1]]], collapse=" ")
chunks <- rbind(chunks, a)
}
matches <- one[one$word %in% chunks, ]
matches <- matches[order(-matches$LL),]
if(length(matches[,1]) > 1) one <- one[-as.numeric(row.names(matches[-1,])), ]
keep <- rbind(keep, matches[1,])
View(keep)
z<-4
splits <- strsplit(bigger$word[z], " ")
chunks <- bigger$word[z]
mixups <- list(c(1:2), c(2:3), c(3:4), c(4:5), c(1:3), c(2:4), c(3:5), c(1:4), c(2:5))
if(gram==4) mixups <- mixups[c(1,2,3,5,6)]
if(gram==3) mixups <- mixups[c(1,2,5)]
for(j in 1:length(mixups)) {
a <- str_c(splits[[1]][mixups[j][[1]]], collapse=" ")
chunks <- rbind(chunks, a)
}
matches <- one[one$word %in% chunks, ]
matches <- matches[order(-matches$LL),]
if(length(matches[,1]) > 1) one <- one[-as.numeric(row.names(matches[-1,])), ]
keep <- rbind(keep, matches[1,])
View(keep)
z
splits <- strsplit(bigger$word[z], " ")
splits
View(one)
View(bigger)
keep <- NULL
for(speaker in unique(ngrams.unique$speaker)){
one <- ngrams.unique[ngrams.unique$speaker==speaker, ]
row.names(one) <- NULL
for(gram in c(5,4,3)) {
bigger <- one[one$ngram==gram, ]
if(length(bigger[,1]) > 0) {
for(z in seq_along(bigger[,1])) {
splits <- strsplit(bigger$word[z], " ")
chunks <- bigger$word[z]
mixups <- list(c(1:2), c(2:3), c(3:4), c(4:5), c(1:3), c(2:4), c(3:5), c(1:4), c(2:5))
if(gram==4) mixups <- mixups[c(1,2,3,5,6)]
if(gram==3) mixups <- mixups[c(1,2,5)]
for(j in 1:length(mixups)) {
a <- str_c(splits[[1]][mixups[j][[1]]], collapse=" ")
chunks <- rbind(chunks, a)
}
matches <- one[one$word %in% chunks, ]
matches <- matches[order(-matches$LL),]
if(length(matches[,1]) > 1) one <- one[-as.numeric(row.names(matches[-1,])), ]
keep <- rbind(keep, matches[1,])
}
}
}
}
View(keep)
View(chunks)
gram <- 5
speaker <- "WENDY"
one <- ngrams.unique[ngrams.unique$speaker==speaker, ]
row.names(one) <- NULL
bigger <- one[one$ngram==gram, ]
z <-1
splits <- strsplit(bigger$word[z], " ")
chunks <- bigger$word[z]
mixups <- list(c(1:2), c(2:3), c(3:4), c(4:5), c(1:3), c(2:4), c(3:5), c(1:4), c(2:5))
if(gram==4) mixups <- mixups[c(1,2,3,5,6)]
if(gram==3) mixups <- mixups[c(1,2,5)]
for(j in 1:length(mixups)) {
a <- str_c(splits[[1]][mixups[j][[1]]], collapse=" ")
chunks <- rbind(chunks, a)
}
matches <- one[one$word %in% chunks, ]
matches <- matches[order(-matches$LL),]
View(matches)
if(length(matches[,1]) > 1) one <- one[-as.numeric(row.names(matches[-1,])), ]
keep <- rbind(keep, matches[1,])
4 <- gram
4 <- grams
gram <- 4
View(one)
bigger <- one[one$ngram==gram, ]
z <-1
splits <- strsplit(bigger$word[z], " ")
chunks <- bigger$word[z]
mixups <- list(c(1:2), c(2:3), c(3:4), c(4:5), c(1:3), c(2:4), c(3:5), c(1:4), c(2:5))
if(gram==4) mixups <- mixups[c(1,2,3,5,6)]
if(gram==3) mixups <- mixups[c(1,2,5)]
for(j in 1:length(mixups)) {
a <- str_c(splits[[1]][mixups[j][[1]]], collapse=" ")
chunks <- rbind(chunks, a)
}
matches <- one[one$word %in% chunks, ]
matches <- matches[order(-matches$LL),]
if(length(matches[,1]) > 1) one <- one[-as.numeric(row.names(matches[-1,])), ]
keep <- rbind(keep, matches[1,])
tail(keep)
z <-2
splits <- strsplit(bigger$word[z], " ")
chunks <- bigger$word[z]
mixups <- list(c(1:2), c(2:3), c(3:4), c(4:5), c(1:3), c(2:4), c(3:5), c(1:4), c(2:5))
if(gram==4) mixups <- mixups[c(1,2,3,5,6)]
if(gram==3) mixups <- mixups[c(1,2,5)]
for(j in 1:length(mixups)) {
a <- str_c(splits[[1]][mixups[j][[1]]], collapse=" ")
chunks <- rbind(chunks, a)
}
matches <- one[one$word %in% chunks, ]
matches <- matches[order(-matches$LL),]
if(length(matches[,1]) > 1) one <- one[-as.numeric(row.names(matches[-1,])), ]
keep <- rbind(keep, matches[1,])
chunks
View(matches)
gram <- 3
View(one)
bigger <- one[one$ngram==gram, ]
z ≤- 1
z <-1
bigger
splits <- strsplit(bigger$word[z], " ")
chunks <- bigger$word[z]
mixups <- list(c(1:2), c(2:3), c(3:4), c(4:5), c(1:3), c(2:4), c(3:5), c(1:4), c(2:5))
if(gram==4) mixups <- mixups[c(1,2,3,5,6)]
if(gram==3) mixups <- mixups[c(1,2,5)]
for(j in 1:length(mixups)) {
a <- str_c(splits[[1]][mixups[j][[1]]], collapse=" ")
chunks <- rbind(chunks, a)
}
matches <- one[one$word %in% chunks, ]
matches <- matches[order(-matches$LL),]
if(length(matches[,1]) > 1) one <- one[-as.numeric(row.names(matches[-1,])), ]
keep <- rbind(keep, matches[1,])
tail(keep)
keep <- NULL
for(speaker in unique(ngrams.unique$speaker)){
one <- ngrams.unique[ngrams.unique$speaker==speaker, ]
row.names(one) <- NULL
for(gram in c(5,4,3)) {
bigger <- one[one$ngram==gram, ]
if(length(bigger[,1]) > 0) {
for(z in seq_along(bigger[,1])) {
splits <- strsplit(bigger$word[z], " ")
chunks <- bigger$word[z]
mixups <- list(c(1:2), c(2:3), c(3:4), c(4:5), c(1:3), c(2:4), c(3:5), c(1:4), c(2:5))
if(gram==4) mixups <- mixups[c(1,2,3,5,6)]
if(gram==3) mixups <- mixups[c(1,2,5)]
for(j in 1:length(mixups)) {
a <- str_c(splits[[1]][mixups[j][[1]]], collapse=" ")
chunks <- rbind(chunks, a)
}
matches <- one[one$word %in% chunks, ]
matches <- matches[order(-matches$LL),]
if(length(matches[,1]) > 1) one <- one[-as.numeric(row.names(matches[-1,])), ]
keep <- rbind(keep, matches[1,])
}
}
}
}
ngrams.norepeat <- unique(keep)
View(ngrams.norepeat)
keep <- NULL
for(speaker in unique(ngrams.unique$speaker)){
one <- ngrams.unique[ngrams.unique$speaker==speaker, ]
row.names(one) <- NULL
for(gram in c(5,4,3)) {
bigger <- one[one$ngram==gram, ]
if(length(bigger[,1]) > 0) {
for(z in seq_along(bigger[,1])) {
splits <- strsplit(bigger$word[z], " ")
chunks <- bigger$word[z]
mixups <- list(c(1:2), c(2:3), c(3:4), c(4:5), c(1:3), c(2:4), c(3:5), c(1:4), c(2:5))
if(gram==4) mixups <- mixups[c(1,2,3,5,6)]
if(gram==3) mixups <- mixups[c(1,2,5)]
for(j in 1:length(mixups)) {
a <- str_c(splits[[1]][mixups[j][[1]]], collapse=" ")
chunks <- rbind(chunks, a)
}
matches <- one[one$word %in% chunks, ]
matches <- matches[order(-matches$LL),]
if(length(matches[,1]) > 1) one <- one[-as.numeric(row.names(matches[-1,])), ]
keep <- rbind(keep, matches[1,])
}
}
}
}
ngrams.norepeat <- unique(keep)
View(ngrams.norepeat)
chunks
speaker <- "CARTMAN"
keep <- NULL
one <- ngrams.unique[ngrams.unique$speaker==speaker, ]
row.names(one) <- NULL
for(gram in c(5,4,3)) {
bigger <- one[one$ngram==gram, ]
if(length(bigger[,1]) > 0) {
for(z in seq_along(bigger[,1])) {
splits <- strsplit(bigger$word[z], " ")
chunks <- bigger$word[z]
mixups <- list(c(1:2), c(2:3), c(3:4), c(4:5), c(1:3), c(2:4), c(3:5), c(1:4), c(2:5))
if(gram==4) mixups <- mixups[c(1,2,3,5,6)]
if(gram==3) mixups <- mixups[c(1,2,5)]
for(j in 1:length(mixups)) {
a <- str_c(splits[[1]][mixups[j][[1]]], collapse=" ")
chunks <- rbind(chunks, a)
}
matches <- one[one$word %in% chunks, ]
matches <- matches[order(-matches$LL),]
if(length(matches[,1]) > 1) one <- one[-as.numeric(row.names(matches[-1,])), ]
keep <- rbind(keep, matches[1,])
}
}
}
View(keep)
one <- ngrams.unique[ngrams.unique$speaker==speaker, ]
row.names(one) <- NULL
gram <-5
bigger <- one[one$ngram==gram, ]
z <-1
table(one$ngram)
plits <- strsplit(bigger$word[z], " ")
chunks <- bigger$word[z]
mixups <- list(c(1:2), c(2:3), c(3:4), c(4:5), c(1:3), c(2:4), c(3:5), c(1:4), c(2:5))
if(gram==4) mixups <- mixups[c(1,2,3,5,6)]
if(gram==3) mixups <- mixups[c(1,2,5)]
for(j in 1:length(mixups)) {
a <- str_c(splits[[1]][mixups[j][[1]]], collapse=" ")
chunks <- rbind(chunks, a)
}
matches <- one[one$word %in% chunks, ]
matches <- matches[order(-matches$LL),]
if(length(matches[,1]) > 1) one <- one[-as.numeric(row.names(matches[-1,])), ]
keep <- rbind(keep, matches[1,])
keep
View(ngrams.unique)
keep <- NULL
for(speaker in unique(ngrams.unique$speaker)){
one <- ngrams.unique[ngrams.unique$speaker==speaker, ]
row.names(one) <- NULL
for(gram in c(4,3)) {
bigger <- one[one$ngram==gram, ]
if(length(bigger[,1]) > 0) {
for(z in seq_along(bigger[,1])) {
splits <- strsplit(bigger$word[z], " ")
chunks <- bigger$word[z]
mixups <- list(c(1:2), c(2:3), c(3:4), c(4:5), c(1:3), c(2:4), c(3:5), c(1:4), c(2:5))
if(gram==4) mixups <- mixups[c(1,2,3,5,6)]
if(gram==3) mixups <- mixups[c(1,2,5)]
for(j in 1:length(mixups)) {
a <- str_c(splits[[1]][mixups[j][[1]]], collapse=" ")
chunks <- rbind(chunks, a)
}
matches <- one[one$word %in% chunks, ]
matches <- matches[order(-matches$LL),]
if(length(matches[,1]) > 1) one <- one[-as.numeric(row.names(matches[-1,])), ]
keep <- rbind(keep, matches[1,])
}
}
}
}
ngrams.norepeat <- unique(keep)
View(ngrams.norepeat)
ngrams <- read.csv("southpark_ngrams.csv", stringsAsFactors=FALSE)
# for each ngram, keep only the highest and lowest LL / reduce from 75552 to 1477 obs.
ngrams <- ngrams[abs(ngrams$LL) >= 10.83, ]
n.unique <- function(df){
ngrams.unique <- NULL
words <- unique(df$word)
for(h in seq_along(words)) {
subset <- df[df$word==words[h],]
if(length(subset[,1]) > 1) subset <- subset[order(-abs(subset$LL)), ]
ngrams.unique <- rbind(ngrams.unique, subset[1,])
}
return(ngrams.unique)
}
ngrams.unique <- rbind(n.unique(ngrams[ngrams$LL >= 0, ]),
n.unique(ngrams[ngrams$LL < 0, ]))
write.csv(ngrams.unique, "southpark_ngrams_filtered.csv", row.names=FALSE)
ngrams <- read.csv("southpark_ngrams_filtered.csv", stringsAsFactors=FALSE)
# keep just main speakers
main.speakers <- c("CARTMAN", "STAN", "KYLE", "KENNY", "RANDY",
"BUTTERS", "MR..GARRISON", "MS..CARTMAN")
plot <- ngrams[ngrams$speaker %in% main.speakers, ]
# split by speaker, rank by log likelihood  * ngram length, keep the top 25
rankbyspeaker <- function(df, direction) {
rank <- NULL
speakers <- unique(df$speaker)
for(j in speakers) {
subset <- df[df$speaker==j,]
subset$rank <- subset$LL*subset$ngram
if(length(subset[,1]) > 25) {
subset <- subset[order(-subset$rank), ]
subset <- subset[1:25,]
}
subset <- subset[order(subset$rank),]
row.names(subset) <- NULL
subset$rank2 <- as.numeric(row.names(subset))
rank <- rbind(rank, subset)
}
return(rank)
}
ranked <- rankbyspeaker(plot)
# generate plot
ggplot(ranked, aes(speaker, rank2)) +
geom_point(color="white") +
geom_label(aes(label=ranked$word,fill=ranked$speaker), color='white', fontface='bold') +
scale_fill_brewer(palette="Paired") +
theme_classic() +
theme(legend.position=1,plot.title = element_text(size=22)) +
labs(title="Most Characteristic Words & Phrases by South Park Character") +
xlab("") + ylab("Ranking") +
scale_y_continuous(breaks = c(5,15,25), labels = c("#20", "#10", "#1"))
df <- ngrams
df <- plot
rank <- NULL
speakers <- unique(df$speaker)
speaker <- "WENDY"
subset <- df[df$speaker==j,]
speaker <- "KENNY"
subset <- df[df$speaker==j,]
ngrams <- read.csv("southpark_ngrams_filtered.csv", stringsAsFactors=FALSE)
# keep just main speakers
main.speakers <- c("CARTMAN", "STAN", "KYLE", "KENNY", "RANDY",
"BUTTERS", "MR..GARRISON", "MS..CARTMAN")
plot <- ngrams[ngrams$speaker %in% main.speakers, ]
df <- plot
subset <- df[df$speaker==j,]
subset <- df[df$speaker=="KENNY",]
j <- "KENNY"
subset <- df[df$speaker==j,]
subset$rank <- subset$LL*subset$ngram
View(subset)
subset <- subset[order(subset$rank),]
View(subset)
subset <- subset[order(-subset$rank),]
View(subset)
row.names(subset) <- NULL
subset$rank2 <- as.numeric(row.names(subset))
View(subset)
rankbyspeaker <- function(df, direction) {
rank <- NULL
speakers <- unique(df$speaker)
for(j in speakers) {
subset <- df[df$speaker==j,]
subset$rank <- subset$LL*subset$ngram
subset <- subset[order(-subset$rank),]
if(length(subset[,1]) > 25) subset <- subset[1:25,]
row.names(subset) <- NULL
subset$rank2 <- as.numeric(row.names(subset))
rank <- rbind(rank, subset)
}
return(rank)
}
ranked <- rankbyspeaker(plot)
View(ranked)
ggplot(ranked, aes(speaker, (rank2*-1))) +
geom_point(color="white") +
geom_label(aes(label=ranked$word,fill=ranked$speaker), color='white', fontface='bold') +
scale_fill_brewer(palette="Paired") +
theme_classic() +
theme(legend.position=1,plot.title = element_text(size=22)) +
labs(title="Most Characteristic Words & Phrases by South Park Character") +
xlab("") + ylab("Ranking") +
scale_y_continuous(breaks = c(5,15,25), labels = c("#20", "#10", "#1"))
ggplot(ranked, aes(speaker, (rank2*-1))) +
geom_point(color="white") +
geom_label(aes(label=ranked$word,fill=ranked$speaker), color='white', fontface='bold') +
scale_fill_brewer(palette="Paired") +
theme_classic() +
theme(legend.position=1,plot.title = element_text(size=22)) +
labs(title="Most Characteristic Words & Phrases by South Park Character") +
xlab("") + ylab("Ranking") +
scale_y_continuous(breaks = c(-20, -10, -1), labels = c("#20", "#10", "#1"))
ranked <- ranked[ranked$ngram!=2,]
ggplot(ranked, aes(speaker, (rank2*-1))) +
geom_point(color="white") +
geom_label(aes(label=ranked$word,fill=ranked$speaker), color='white', fontface='bold') +
scale_fill_brewer(palette="Paired") +
theme_classic() +
theme(legend.position=1,plot.title = element_text(size=22)) +
labs(title="Most Characteristic Words & Phrases by South Park Character") +
xlab("") + ylab("Ranking") +
scale_y_continuous(breaks = c(-20, -10, -1), labels = c("#20", "#10", "#1"))
ranked <- rankbyspeaker(plot[plot$ngram!=2,])
# generate plot
ggplot(ranked, aes(speaker, (rank2*-1))) +
geom_point(color="white") +
geom_label(aes(label=ranked$word,fill=ranked$speaker), color='white', fontface='bold') +
scale_fill_brewer(palette="Paired") +
theme_classic() +
theme(legend.position=1,plot.title = element_text(size=22)) +
labs(title="Most Characteristic Words & Phrases by South Park Character") +
xlab("") + ylab("Ranking") +
scale_y_continuous(breaks = c(-20, -10, -1), labels = c("#20", "#10", "#1"))
View(plot)
plot2 <- plot[plot$ngram==2,]
head(plot)
head(plot2)
summary(plot2$LL)
plot2 <- plot2[plot2$LL > 50,]
plot2
rankbyspeaker <- function(df, direction) {
rank <- NULL
speakers <- unique(df$speaker)
for(j in speakers) {
subset <- df[df$speaker==j,]
subset$rank <- subset$LL
subset <- subset[order(-subset$rank),]
if(length(subset[,1]) > 25) subset <- subset[1:25,]
row.names(subset) <- NULL
subset$rank2 <- as.numeric(row.names(subset))
rank <- rbind(rank, subset)
}
return(rank)
}
ranked <- rankbyspeaker(plot)
# generate plot
ggplot(ranked, aes(speaker, (rank2*-1))) +
geom_point(color="white") +
geom_label(aes(label=ranked$word,fill=ranked$speaker), color='white', fontface='bold') +
scale_fill_brewer(palette="Paired") +
theme_classic() +
theme(legend.position=1,plot.title = element_text(size=22)) +
labs(title="Most Characteristic Words & Phrases by South Park Character") +
xlab("") + ylab("Ranking") +
scale_y_continuous(breaks = c(-20, -10, -1), labels = c("#20", "#10", "#1"))
subset$weight <- subset$ngram/2
View(subset)
View(ranked)
subset$rank <- subset$LL*(subset$ngram/2 +.5)
View(subset)
subset$rank <- subset$LL*(subset$ngram/2)
View(subset)
rankbyspeaker <- function(df, direction) {
rank <- NULL
speakers <- unique(df$speaker)
for(j in speakers) {
subset <- df[df$speaker==j,]
subset$rank <- subset$LL*subset$ngram
subset <- subset[order(-subset$rank),]
if(length(subset[,1]) > 25) subset <- subset[1:25,]
row.names(subset) <- NULL
subset$rank2 <- as.numeric(row.names(subset))
rank <- rbind(rank, subset)
}
return(rank)
}
ranked <- rankbyspeaker(plot)
# generate plot
ggplot(ranked, aes(speaker, (rank2*-1))) +
geom_point(color="white") +
geom_label(aes(label=ranked$word,fill=ranked$speaker), color='white', fontface='bold') +
scale_fill_brewer(palette="Paired") +
theme_classic() +
theme(legend.position=1,plot.title = element_text(size=22)) +
labs(title="Most Characteristic Words & Phrases by South Park Character") +
xlab("") + ylab("Ranking") +
scale_y_continuous(breaks = c(-20, -10, -1), labels = c("#20", "#10", "#1"))
