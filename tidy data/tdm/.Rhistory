# add it back in
by_person2 <- rbind(by_person2, other)
by_person2 <- rbind(by_person2, other); rm(by_person)
by_person <- read.csv("southpark_byperson_scripts.csv", stringsAsFactors=FALSE)
# keep the speakers with the most words, this keeps 23
by_person2 <- by_person[nchar(by_person$text) > 10000, ]
# save the rest of the text into one big speaker "ALL.OTHERS"
kept.speakers <- unique(by_person2$speaker)
other.text <- by_person[!(by_person$speaker %in% kept.speakers), ]
other.text <- str_c(other.text$text, collapse=" ")
other <- data.frame(speaker="ALL.OTHERS", text=other.text)
# add it back in
by_person2 <- rbind(by_person2, other); rm(by_person)
myReader <- readTabular(mapping=list(content="text", id="speaker"))
corpus <- Corpus(DataframeSource(by_person2), readerControl=list(reader=myReader))
corpus <- tm_map(corpus,content_transformer(function(x) iconv(x, to='UTF-8-MAC', sub='byte')), mc.cores=1)
corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, content_transformer(removePunctuation), mc.cores=1)
corpus <- tm_map(corpus, content_transformer(removeNumbers))
corpus <- tm_map(corpus, content_transformer(stripWhitespace))
corpus.stop.gone <- tm_map(corpus, removeWords, stopwords("english"))
corpus.tdm <- TermDocumentMatrix(corpus.stop.gone)
tdm.80 <- removeSparseTerms(corpus.tdm, 0.8)
count.tdm <- data.frame(inspect(tdm.80))
count.tdm$word <- row.names(count.tdm)
head(count.tdm)
write.csv(count.tdm, "southpark_tdm.csv", row.names=FALSE)
library(tm)
library(stringr)
setwd("/Users/kaylinwalker/R/textmining_southpark/tidy data/tdm/")
count.tdm <- read.csv("southpark_tdm.csv", stringsAsFactors=FALSE)
bigrams_andup <- function(df) {
output <- NULL
for(person in people) {
temp.p <- subset(df, select=person)
temp.count <- subset(df, select=word)
temp.c <- cbind(temp.p, temp.count)
temp.c <- temp.c[temp.c[,1] > 5, ]
temp <- LL.all(df=count.bi.ws.tdm, wordlist=temp.c, speaker=person)
output <- rbind(output, temp)
}
}
LL.all <- function(df, wordlist, speaker) {
LL.df <- NULL
if(missing(wordlist)) wordlist <- df
for(word in seq_along(wordlist[,1])) {
word <- wordlist$word[word]
speaker.sums <- data.frame(speaker = names(colSums(df[,1:24])) , total=colSums(df[,1:24]), row.names=NULL)
word.sums <- data.frame(word = df$word , total=rowSums(df[ ,1:24]), row.names=NULL)
all.words.total <- sum(speaker.sums$total)
word.total <- word.sums[word.sums$word==word, 2]
speaker.total <- speaker.sums[speaker.sums$speaker==speaker, 2]
other.total <- all.words.total - speaker.total
speaker.word <- df[df$word==word, ]
speaker.word <- data.frame(speaker=names(speaker.word), count=t(speaker.word), row.names=NULL)
speaker.word <- as.numeric(as.character(speaker.word[speaker.word$speaker==speaker, 2]))
other.word <- word.total - speaker.word
if(speaker.word != 0) {
E1 <- (speaker.total*word.total)/all.words.total
E2 <- (other.total*word.total)/all.words.total
LL <- 2*(speaker.word*log(speaker.word/E1) + other.word*log(other.word/E2))
if(E1 < speaker.word) direction <- "HIGH"
if(E1 >= speaker.word) direction <- "LOW"
row <- data.frame(speaker, word, word.total, speaker.total, speaker.word, E1, E2, LL, direction)
LL.df <- rbind(LL.df, row)
}
}
LL.df <- LL.df[order(LL.df$direction, -LL.df$LL), ]
return(LL.df)
}
bigrams_andup <- function(df) {
output <- NULL
for(person in people) {
temp.p <- subset(df, select=person)
temp.count <- subset(df, select=word)
temp.c <- cbind(temp.p, temp.count)
temp.c <- temp.c[temp.c[,1] > 5, ]
temp <- LL.all(df=df, wordlist=temp.c, speaker=person)
output <- rbind(output, temp)
}
}
colnames(count.tdm)
colnames(count.tdm[,-25])
people <- colnames(count.tdm[,-25])
LL_pass <- function(df, ngramsize) {
output <- NULL
for(person in people) {
if (ngramsize > 1) {
temp.p <- subset(df, select=person)
temp.count <- subset(df, select=word)
temp.c <- cbind(temp.p, temp.count)
temp.c <- temp.c[temp.c[,1] > 5, ]
temp <- LL.all(df=df, wordlist=temp.c, speaker=person)
} else { temp <- LL.all(df=df, wordlist=df, speaker=person) }
output <- rbind(output, temp)
}
}
count.quint.ws.tdm <- read.csv("southpark_quint_tdm_wstop.csv", stringsAsFactors=FALSE)
LL_pass(count.quint.ws.tdm, 5)
df <- count.quint.ws.tdm
ngramsize <- 5
output <- NULL
person <- "SHARON"
ngramsize > 1
temp.p <- subset(df, select=person)
View(temp.p)
temp.count <- subset(df, select=word)
temp.c <- cbind(temp.p, temp.count)
temp.c <- temp.c[temp.c[,1] > 5, ]
temp <- LL.all(df=df, wordlist=temp.c, speaker=person)
summary(temp.p)
temp.p <- subset(df, select=person)
temp.count <- subset(df, select=word)
temp.c <- cbind(temp.p, temp.count)
temp.c <- temp.c[temp.c[,1] > 0, ]
temp <- LL.all(df=df, wordlist=temp.c, speaker=person)
temp
LL.all <- function(df, wordlist, speaker) {
LL.df <- NULL
if(missing(wordlist)) wordlist <- df
for(word in seq_along(wordlist[,1])) {
word <- wordlist$word[word]
speaker.sums <- data.frame(speaker = names(colSums(df[,1:24])) , total=colSums(df[,1:24]), row.names=NULL)
word.sums <- data.frame(word = df$word , total=rowSums(df[ ,1:24]), row.names=NULL)
all.words.total <- sum(speaker.sums$total)
word.total <- word.sums[word.sums$word==word, 2]
speaker.total <- speaker.sums[speaker.sums$speaker==speaker, 2]
other.total <- all.words.total - speaker.total
speaker.word <- df[df$word==word, ]
speaker.word <- data.frame(speaker=names(speaker.word), count=t(speaker.word), row.names=NULL)
speaker.word <- as.numeric(as.character(speaker.word[speaker.word$speaker==speaker, 2]))
other.word <- word.total - speaker.word
if(speaker.word != 0) {
E1 <- (speaker.total*word.total)/all.words.total
E2 <- (other.total*word.total)/all.words.total
LL <- 2*(speaker.word*log(speaker.word/E1) + other.word*log(other.word/E2))
if(E1 < speaker.word) LL <- -1*LL
row <- data.frame(speaker, word, word.total, speaker.total, speaker.word, E1, E2, LL, direction)
LL.df <- rbind(LL.df, row)
}
}
LL.df <- LL.df[order(LL.df$direction, -LL.df$LL), ]
return(LL.df)
}
LL_pass <- function(df, ngramsize) {
output <- NULL
for(person in people) {
if (ngramsize > 1) {
temp.p <- subset(df, select=person)
temp.count <- subset(df, select=word)
temp.c <- cbind(temp.p, temp.count)
temp.c <- temp.c[temp.c[,1] > 0, ]
temp <- LL.all(df=df, wordlist=temp.c, speaker=person)
} else { temp <- LL.all(df=df, wordlist=df, speaker=person) }
output <- rbind(output, temp)
}
}
output <- NULL
temp.p <- subset(df, select=person)
temp.count <- subset(df, select=word)
temp.c <- cbind(temp.p, temp.count)
temp.c <- temp.c[temp.c[,1] > 0, ]
temp <- LL.all(df=df, wordlist=temp.c, speaker=person)
LL.all <- function(df, wordlist, speaker) {
LL.df <- NULL
if(missing(wordlist)) wordlist <- df
for(word in seq_along(wordlist[,1])) {
word <- wordlist$word[word]
speaker.sums <- data.frame(speaker = names(colSums(df[,1:24])) , total=colSums(df[,1:24]), row.names=NULL)
word.sums <- data.frame(word = df$word , total=rowSums(df[ ,1:24]), row.names=NULL)
all.words.total <- sum(speaker.sums$total)
word.total <- word.sums[word.sums$word==word, 2]
speaker.total <- speaker.sums[speaker.sums$speaker==speaker, 2]
other.total <- all.words.total - speaker.total
speaker.word <- df[df$word==word, ]
speaker.word <- data.frame(speaker=names(speaker.word), count=t(speaker.word), row.names=NULL)
speaker.word <- as.numeric(as.character(speaker.word[speaker.word$speaker==speaker, 2]))
other.word <- word.total - speaker.word
if(speaker.word != 0) {
E1 <- (speaker.total*word.total)/all.words.total
E2 <- (other.total*word.total)/all.words.total
LL <- 2*(speaker.word*log(speaker.word/E1) + other.word*log(other.word/E2))
if(E1 < speaker.word) LL <- -1*LL
row <- data.frame(speaker, word, word.total, speaker.total, speaker.word, E1, E2, LL, direction)
LL.df <- rbind(LL.df, row)
}
}
LL.df <- LL.df[order(-LL.df$LL), ]
return(LL.df)
}
temp <- LL.all(df=df, wordlist=temp.c, speaker=person)
LL.all <- function(df, wordlist, speaker) {
LL.df <- NULL
if(missing(wordlist)) wordlist <- df
for(word in seq_along(wordlist[,1])) {
word <- wordlist$word[word]
speaker.sums <- data.frame(speaker = names(colSums(df[,1:24])) , total=colSums(df[,1:24]), row.names=NULL)
word.sums <- data.frame(word = df$word , total=rowSums(df[ ,1:24]), row.names=NULL)
all.words.total <- sum(speaker.sums$total)
word.total <- word.sums[word.sums$word==word, 2]
speaker.total <- speaker.sums[speaker.sums$speaker==speaker, 2]
other.total <- all.words.total - speaker.total
speaker.word <- df[df$word==word, ]
speaker.word <- data.frame(speaker=names(speaker.word), count=t(speaker.word), row.names=NULL)
speaker.word <- as.numeric(as.character(speaker.word[speaker.word$speaker==speaker, 2]))
other.word <- word.total - speaker.word
if(speaker.word != 0) {
E1 <- (speaker.total*word.total)/all.words.total
E2 <- (other.total*word.total)/all.words.total
LL <- 2*(speaker.word*log(speaker.word/E1) + other.word*log(other.word/E2))
if(E1 < speaker.word) LL <- -1*LL
row <- data.frame(speaker, word, word.total, speaker.total, speaker.word, E1, E2, LL)
LL.df <- rbind(LL.df, row)
}
}
LL.df <- LL.df[order(-LL.df$LL), ]
return(LL.df)
}
temp <- LL.all(df=df, wordlist=temp.c, speaker=person)
temp
LL.all <- function(df, wordlist, speaker) {
LL.df <- NULL
if(missing(wordlist)) wordlist <- df
for(word in seq_along(wordlist[,1])) {
word <- wordlist$word[word]
speaker.sums <- data.frame(speaker = names(colSums(df[,1:24])) , total=colSums(df[,1:24]), row.names=NULL)
word.sums <- data.frame(word = df$word , total=rowSums(df[ ,1:24]), row.names=NULL)
all.words.total <- sum(speaker.sums$total)
word.total <- word.sums[word.sums$word==word, 2]
speaker.total <- speaker.sums[speaker.sums$speaker==speaker, 2]
other.total <- all.words.total - speaker.total
speaker.word <- df[df$word==word, ]
speaker.word <- data.frame(speaker=names(speaker.word), count=t(speaker.word), row.names=NULL)
speaker.word <- as.numeric(as.character(speaker.word[speaker.word$speaker==speaker, 2]))
other.word <- word.total - speaker.word
if(speaker.word != 0) {
E1 <- (speaker.total*word.total)/all.words.total
E2 <- (other.total*word.total)/all.words.total
LL <- 2*(speaker.word*log(speaker.word/E1) + other.word*log(other.word/E2))
if(E1 < speaker.word) LL <- -1*LL
row <- data.frame(speaker, word, word.total, speaker.total, speaker.word, E1, E2, LL)
LL.df <- rbind(LL.df, row)
}
}
LL.df <- LL.df[order(-LL.df$LL), ]
return(LL.df)
}
temp <- LL.all(df=df, wordlist=temp.c, speaker=person)
View(temp)
LL.all <- function(df, wordlist, speaker) {
LL.df <- NULL
if(missing(wordlist)) wordlist <- df
for(word in seq_along(wordlist[,1])) {
word <- wordlist$word[word]
speaker.sums <- data.frame(speaker = names(colSums(df[,1:24])) , total=colSums(df[,1:24]), row.names=NULL)
word.sums <- data.frame(word = df$word , total=rowSums(df[ ,1:24]), row.names=NULL)
all.words.total <- sum(speaker.sums$total)
word.total <- word.sums[word.sums$word==word, 2]
speaker.total <- speaker.sums[speaker.sums$speaker==speaker, 2]
other.total <- all.words.total - speaker.total
speaker.word <- df[df$word==word, ]
speaker.word <- data.frame(speaker=names(speaker.word), count=t(speaker.word), row.names=NULL)
speaker.word <- as.numeric(as.character(speaker.word[speaker.word$speaker==speaker, 2]))
other.word <- word.total - speaker.word
if(speaker.word != 0) {
E1 <- (speaker.total*word.total)/all.words.total
E2 <- (other.total*word.total)/all.words.total
LL <- 2*(speaker.word*log(speaker.word/E1) + other.word*log(other.word/E2))
if(E1 > speaker.word) LL <- -1*LL
row <- data.frame(speaker, word, word.total, speaker.total, speaker.word, E1, E2, LL)
LL.df <- rbind(LL.df, row)
}
}
LL.df <- LL.df[order(-LL.df$LL), ]
return(LL.df)
}
temp.p <- subset(df, select=person)
temp.count <- subset(df, select=word)
temp.c <- cbind(temp.p, temp.count)
temp.c <- temp.c[temp.c[,1] > 0, ]
temp <- LL.all(df=df, wordlist=temp.c, speaker=person)
View(temp)
LL_pass(count.quint.ws.tdm, 5)
LL_pass <- function(df, ngramsize) {
output <- NULL
for(person in people) {
if (ngramsize > 1) {
temp.p <- subset(df, select=person)
temp.count <- subset(df, select=word)
temp.c <- cbind(temp.p, temp.count)
temp.c <- temp.c[temp.c[,1] > 0, ]
temp <- LL.all(df=df, wordlist=temp.c, speaker=person)
} else { temp <- LL.all(df=df, wordlist=df, speaker=person) }
output <- rbind(output, temp)
}
return(output)
}
n <- LL_pass(count.quint.ws.tdm, 5)
View(n)
hist(n$LL)
table(n$speaker)
library(tm)
library(stringr)
setwd("/Users/kaylinwalker/R/textmining_southpark/tidy data/tdm/")
count.tdm <- read.csv("southpark_tdm.csv", stringsAsFactors=FALSE)
count.bi.ws.tdm <- read.csv("southpark_bi_tdm_wstop.csv", stringsAsFactors=FALSE)
count.tri.ws.tdm <- read.csv("southpark_tri_tdm_wstop.csv", stringsAsFactors=FALSE)
count.quad.ws.tdm <- read.csv("southpark_quad_tdm_wstop.csv", stringsAsFactors=FALSE)
count.quint.ws.tdm <- read.csv("southpark_quint_tdm_wstop.csv", stringsAsFactors=FALSE)
################################### DEFINTE FUNCTIONS
LL.all <- function(df, wordlist, speaker) {
LL.df <- NULL
if(missing(wordlist)) wordlist <- df
for(word in seq_along(wordlist[,1])) {
word <- wordlist$word[word]
speaker.sums <- data.frame(speaker = names(colSums(df[,1:24])) , total=colSums(df[,1:24]), row.names=NULL)
word.sums <- data.frame(word = df$word , total=rowSums(df[ ,1:24]), row.names=NULL)
all.words.total <- sum(speaker.sums$total)
word.total <- word.sums[word.sums$word==word, 2]
speaker.total <- speaker.sums[speaker.sums$speaker==speaker, 2]
other.total <- all.words.total - speaker.total
speaker.word <- df[df$word==word, ]
speaker.word <- data.frame(speaker=names(speaker.word), count=t(speaker.word), row.names=NULL)
speaker.word <- as.numeric(as.character(speaker.word[speaker.word$speaker==speaker, 2]))
other.word <- word.total - speaker.word
if(speaker.word != 0) {
E1 <- (speaker.total*word.total)/all.words.total
E2 <- (other.total*word.total)/all.words.total
LL <- 2*(speaker.word*log(speaker.word/E1) + other.word*log(other.word/E2))
if(E1 > speaker.word) LL <- -1*LL
row <- data.frame(speaker, word, word.total, speaker.total, speaker.word, E1, E2, LL)
LL.df <- rbind(LL.df, row)
}
}
LL.df <- LL.df[order(-LL.df$LL), ]
return(LL.df)
}
LL_pass <- function(df, ngramsize) {
output <- NULL
for(person in people) {
if (ngramsize > 1) {
temp.p <- subset(df, select=person)
temp.count <- subset(df, select=word)
temp.c <- cbind(temp.p, temp.count)
temp.c <- temp.c[temp.c[,1] > 0, ]
temp <- LL.all(df=df, wordlist=temp.c, speaker=person)
} else { temp <- LL.all(df=df, wordlist=df, speaker=person) }
output <- rbind(output, temp)
}
return(output)
}
uniLL <- LL_pass(count.tdm, 1)
df <- count.quint.ws.tdm
people <- colnames(df[,(length(df[,1])-1)])
people <- colnames(df[,1:(length(df[,1])-1)])
df[,1:(length(df[,1])-1)]
1:(length(df[,1])
)
(length(df[,1])-1)
c(1:(length(df[,1])-1))
colnames(df[,c(1:(length(df[,1])-1))])
people <- colnames(df[,c(1:(length(df[1,])-1))])
LL_pass <- function(df, ngramsize) {
output <- NULL
people <- colnames(df[,c(1:(length(df[1,])-1))])
for(person in people) {
if (ngramsize > 1) {
temp.p <- subset(df, select=person)
temp.count <- subset(df, select=word)
temp.c <- cbind(temp.p, temp.count)
temp.c <- temp.c[temp.c[,1] > 0, ]
temp <- LL.all(df=df, wordlist=temp.c, speaker=person)
} else { temp <- LL.all(df=df, wordlist=df, speaker=person) }
output <- rbind(output, temp)
}
return(output)
}
################################### RUN
uniLL <- LL_pass(count.tdm, 1)
LL_pass <- function(df, ngramsize) {
output <- NULL
people <- colnames(df[,c(1:(length(df[1,])-1))])
for(person in people) {
if (ngramsize > 1) {
temp.p <- subset(df, select=person)
temp.count <- subset(df, select=word)
temp.c <- cbind(temp.p, temp.count)
temp.c <- temp.c[temp.c[,1] > 5, ]
temp <- LL.all(df=df, wordlist=temp.c, speaker=person)
} else { temp <- LL.all(df=df, wordlist=df, speaker=person) }
output <- rbind(output, temp)
}
return(output)
}
LL_pass <- function(df, ngramsize, threshold) {
output <- NULL
people <- colnames(df[,c(1:(length(df[1,])-1))])
for(person in people) {
if (ngramsize > 1) {
temp.p <- subset(df, select=person)
temp.count <- subset(df, select=word)
temp.c <- cbind(temp.p, temp.count)
temp.c <- temp.c[temp.c[,1] > threshold, ]
temp <- LL.all(df=df, wordlist=temp.c, speaker=person)
} else { temp <- LL.all(df=df, wordlist=df, speaker=person) }
output <- rbind(output, temp)
}
return(output)
}
system.time(quintLL <- LL_pass(count.quint.ws.tdm, 5, 1))
df <- count.quint.ws.tdm
people <- colnames(df[,c(1:(length(df[1,])-1))])
person <- "SHARON"
temp.p <- subset(df, select=person)
temp.count <- subset(df, select=word)
temp.c <- cbind(temp.p, temp.count)
temp.c <- temp.c[temp.c[,1] > threshold, ]
treshold <- 1
temp.c <- temp.c[temp.c[,1] > threshold, ]
temp.c <- temp.c[temp.c[,1] > 1, ]
temp.c
temp <- LL.all(df=df, wordlist=temp.c, speaker=person)
temp
for(person in people) {
if (ngramsize > 1) {
temp.p <- subset(df, select=person)
temp.count <- subset(df, select=word)
temp.c <- cbind(temp.p, temp.count)
temp.c <- temp.c[temp.c[,1] > threshold, ]
temp <- LL.all(df=df, wordlist=temp.c, speaker=person)
} else { temp <- LL.all(df=df, wordlist=df, speaker=person) }
output <- rbind(output, temp)
}
ngramsize <- 5
for(person in people) {
if (ngramsize > 1) {
temp.p <- subset(df, select=person)
temp.count <- subset(df, select=word)
temp.c <- cbind(temp.p, temp.count)
temp.c <- temp.c[temp.c[,1] > threshold, ]
temp <- LL.all(df=df, wordlist=temp.c, speaker=person)
} else { temp <- LL.all(df=df, wordlist=df, speaker=person) }
output <- rbind(output, temp)
}
threshold <-1
for(person in people) {
if (ngramsize > 1) {
temp.p <- subset(df, select=person)
temp.count <- subset(df, select=word)
temp.c <- cbind(temp.p, temp.count)
temp.c <- temp.c[temp.c[,1] > threshold, ]
temp <- LL.all(df=df, wordlist=temp.c, speaker=person)
} else { temp <- LL.all(df=df, wordlist=df, speaker=person) }
output <- rbind(output, temp)
}
output <- NULL
people <- colnames(df[,c(1:(length(df[1,])-1))])
for(person in people) {
if (ngramsize > 1) {
temp.p <- subset(df, select=person)
temp.count <- subset(df, select=word)
temp.c <- cbind(temp.p, temp.count)
temp.c <- temp.c[temp.c[,1] > threshold, ]
temp <- LL.all(df=df, wordlist=temp.c, speaker=person)
} else { temp <- LL.all(df=df, wordlist=df, speaker=person) }
output <- rbind(output, temp)
}
temp.p <- subset(df, select=person)
temp.count <- subset(df, select=word)
temp.c <- cbind(temp.p, temp.count)
temp.c <- temp.c[temp.c[,1] > threshold, ]
if(ngramsize==1) df <- temp.w
if(ngramsize==1) temp.w <- df
temp.p <- subset(df, select=person)
temp.count <- subset(df, select=word)
temp.c <- cbind(temp.p, temp.count)
temp.w <- temp.c[temp.c[,1] > threshold, ]
if(length(temp.w[,1]) > 0) {
temp <- LL.all(df=df, wordlist=temp.w, speaker=person)
output <- rbind(output, temp)
}
temp
LL_pass <- function(df, ngramsize, threshold) {
output <- NULL
people <- colnames(df[,c(1:(length(df[1,])-1))])
if(ngramsize==1) temp.w <- df
for(person in people) {
temp.p <- subset(df, select=person)
temp.count <- subset(df, select=word)
temp.c <- cbind(temp.p, temp.count)
temp.w <- temp.c[temp.c[,1] > threshold, ]
if(length(temp.w[,1]) > 0) {
temp <- LL.all(df=df, wordlist=temp.w, speaker=person)
output <- rbind(output, temp)
}
}
return(output)
}
system.time(quintLL <- LL_pass(count.quint.ws.tdm, 5, 1))
View(quintLL)
system.time(biLL <- LL_pass(count.bi.ws.tdm, 2, 5))
system.time(quadLL <- LL_pass(count.quad.ws.tdm, 4, 1))
system.time(triLL <- LL_pass(count.tri.ws.tdm, 3, 5))
system.time(uniLL <- LL_pass(count.tdm, 1, 5))
View(count.bi.ws.tdm)
uniLL$ngram <- 1
biLL$ngram <- 2
triLL$ngram <- 3
quadLL$ngram <- 4
quintLL$ngram <- 5
southpark_ngrams <- rbind(uniLL, biLL, triLL, quadLL, quintLL)
system.time(biLL <- LL_pass(count.bi.ws.tdm, 2, 5)) #
